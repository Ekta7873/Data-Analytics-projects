SQL  Pizza Sales Analysis

1.	-- Retrieve the total  number of orders placed
SELECT 
    COUNT(order_id) AS total_orders
FROM
    orders;


2.	-- Calculate the total revenue generated from pizza sales

SELECT 
    ROUND(SUM(orders_details.quantity * pizzas.price),
            2) AS total_sales
FROM
    orders_details
        JOIN
    pizzas ON orders_details.pizza_id = pizzas.pizza_id

 

3.	-- Identify the highest prize pizza

SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;

 


4.	-- Identify the most common-sized pizza orders

SELECT 
    pizzas.size,
    COUNT(orders_details.order_details_id) AS total_count
FROM
    pizzas
        JOIN
    orders_details ON pizzas.pizza_id = orders_details.pizza_id
GROUP BY pizzas.size
ORDER BY total_count DESC
LIMIT 1;
 

5.	-- list the top 5 most ordered pizza types along with their quantities

SELECT 
    pizza_types.name, SUM(orders_details.quantity) AS quantity
FROM
    pizza_types
       JOIN
   pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY quantity DESC
LIMIT 5;

 

6.	-- join the tables to find total quantity of each pizza category

SELECT 
    SUM(orders_details.quantity) AS quantity,
    pizza_types.category
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY quantity DESC;


 

7.	-- Determine the distribution of orders by hour of the day

SELECT 
    HOUR(order_time) AS hour, COUNT(order_id) AS order_count
FROM
    orders
GROUP BY HOUR(order_time);


 

8.	-- Join relevant tables to find the category-wise distribution of pizzas

SELECT 
    category, COUNT(name)
FROM
    pizza_types
GROUP BY category
 

9.	 -- Group the orders by date and calculate the average number of pizzas ordered per day

SELECT 
    ROUND(AVG(quantity),0)
FROM
    (SELECT 
        orders.order_date, SUM(orders_details.quantity) AS quantity
    FROM
        orders
    JOIN orders_details ON orders.order_id = orders_details.order_id
    GROUP BY orders.order_date) AS order_quantity;

 

10.	 -- Determine the top 3 most pizza types based on revenue

SELECT 
    pizza_types.name,
    SUM(orders_details.quantity * pizzas.price) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY revenue DESC
LIMIT 3;

 

11.	-- Calculate the percentage contribution of each pizza types based on revenue

SELECT 
    pizza_types.category,
    ROUND((SUM(orders_details.quantity * pizzas.price) / (SELECT 
                    ROUND(SUM(orders_details.quantity * pizzas.price),
                                2) AS total_sales
                FROM
                    orders_details
                        JOIN
                    pizzas ON orders_details.pizza_id = pizzas.pizza_id)) * 100,
            2) AS revenue
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    orders_details ON orders_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY revenue DESC;

 


12.	-- Analyze the cumulative rvenue generated over time

SELECT 
    order_date, 
    SUM(revenue) OVER (ORDER BY order_date) 
         AS cum_revenue
FROM
           (SELECT orders.order_date,
                        SUM(orders_details.quantity* pizzas.price) as revenue
FROM orders_details JOIN pizzas
                           ON orders_details.pizza_id = pizzas.pizza_id
JOIN orders 
             ON orders.order_id = orders_details.order_id
GROUP BY orders.order_date) 
AS sales;

 


13.	-- Determine the most top3 most ordered pizza types based on revenue for each pizza category


SELECT name, revenue
FROM
      (SELECT 
             category, name, revenue,
              RANK() OVER (
                              PARTITION BY category ORDER BY revenue DESC) 
          AS rn
FROM
        (SELECT pizza_types.category, pizza_types.name , 
                                   SUM(orders_details.quantity *pizzas.price)
                                   AS revenue
FROM 
        pizza_types 
JOIN
         pizzas 
ON 
          pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN orders_details
ON 
         orders_details.pizza_id = pizzas.pizza_id
GROUP BY 
           pizza_types.category, pizza_types.name) 
            as a) as b
where rn<=3;


 
